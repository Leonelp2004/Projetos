import re
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

model_path = "."

tokenizer = AutoTokenizer.from_pretrained(model_path, local_files_only=True)
model = AutoModelForCausalLM.from_pretrained(
    model_path,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto",
    local_files_only=True
)

# Protocolo espec√≠fico de triagem de quedas
protocolo_quedas = """
PROTOCOLO DE TRIAGEM DE QUEDAS - MANCHESTER

PULSEIRA VERMELHA (Emerg√™ncia):
‚Ä¢ Hipotens√£o (TA<90/60mmHg) + taquicardia (FC>100bpm) + palidez cut√¢nea = CHOQUE
‚Ä¢ Hipotens√£o (TA<90/60mmHg) + taquicardia (FC>100bpm) + sudorese = CHOQUE  
‚Ä¢ Hipotens√£o (TA<90/60mmHg) + taquicardia (FC>100bpm) + diminui√ß√£o consci√™ncia (ECG‚â§12) = CHOQUE
‚Ä¢ Crise epil√©tica t√≥nica/cl√≥nica generalizada = CONVULSIONANDO
‚Ä¢ Glicemia capilar <70 mg/dL = HIPOGLICEMIA

PULSEIRA LARANJA (Muito Urgente):
‚Ä¢ Queda de altura >1m ou >5 escadas = MECANISMO TRAUMA SIGNIFICATIVO
‚Ä¢ Hipotermia (T<35¬∞C) = HIPOTERMIA
‚Ä¢ Dor intensa (>7/10 num√©rica ou >3 f√°cies) = DOR INTENSA

PULSEIRA AMARELA (Urgente):
‚Ä¢ Hist√≥ria de perda de consci√™ncia ap√≥s evento = HIST√ìRIA INCONSCI√äNCIA
‚Ä¢ Dist√∫rbio coagula√ß√£o conhecido = DIST√öRBIO COAGULA√á√ÉO
‚Ä¢ Hist√≥ria discordante (factos n√£o explicam les√µes) = HIST√ìRIA DISCORDANTE  
‚Ä¢ Fratura exposta/deformidade importante = FRATURA EXPOSTA
‚Ä¢ Dor moderada (4-7/10 num√©rica ou 2-3 f√°cies) = DOR MODERADA

PULSEIRA VERDE (Pouco Urgente):
‚Ä¢ Dor ligeira (<3/10 num√©rica ou <2 f√°cies) = DOR LIGEIRA
‚Ä¢ Edema localizado/deformidade = EDEMA/DEFORMIDADE

PULSEIRA AZUL (N√£o Urgente):
‚Ä¢ Queda sem sintomas ou sinais relevantes = QUEDA SEM SINTOMAS
"""

# Prompt de sistema para o LLM principal
system_prompt = f"""Eu sou um assistente de triagem de quedas baseado no protocolo de Manchester. Respondo apenas a quest√µes acerca de quedas, triagem, sintomas, sinais, avalia√ß√£o de gravidade (pulseira Vermelha, Laranja, Amarela, Verde) ou conduta ap√≥s queda em humanos. Se a pergunta for sobre outro tema, recuse com: 'Desculpe, s√≥ posso responder quest√µes relacionadas com triagem de quedas em humanos segundo o protocolo de Manchester.'

{protocolo_quedas}

Use o protocolo acima para determinar pulseiras e seja preciso citando os crit√©rios espec√≠ficos.
"""

# Prompt espec√≠fico para valida√ß√£o pelo LLM
prompt_validacao = """Voc√™ √© um filtro especializado em identificar se perguntas s√£o sobre triagem m√©dica de quedas em humanos.

ACEITE apenas perguntas sobre:
- Avalia√ß√£o m√©dica ap√≥s queda em pessoas
- Atribui√ß√£o de pulseiras de triagem (Vermelha/Laranja/Amarela/Verde/Azul)
- Sintomas, sinais vitais ou condi√ß√µes ap√≥s queda
- Aplica√ß√£o do protocolo de Manchester para quedas
- Cen√°rios cl√≠nicos envolvendo quedas em humanos

REJEITE perguntas sobre:
- Animais (c√£es, gatos, etc.)
- Objetos 
- Quedas n√£o-m√©dicas (pre√ßos, cabelo, sistemas, etc.)
- Preven√ß√£o de quedas (foco deve ser triagem/avalia√ß√£o)
- Outros protocolos n√£o relacionados a quedas
- Assuntos gerais n√£o relacionados a triagem m√©dica

Responda apenas "ACEITAR" ou "REJEITAR":"""

def valida_com_llm(pergunta):
    """Usa o LLM para determinar se a pergunta √© v√°lida"""
    input_validacao = f"{prompt_validacao}\n\nPergunta: \"{pergunta}\"\n\nResposta:"
    
    inputs = tokenizer(input_validacao, return_tensors="pt").to(model.device)
    
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_new_tokens=10,
            temperature=0.1,
            do_sample=False,
            pad_token_id=tokenizer.eos_token_id
        )
    
    resposta = tokenizer.decode(outputs[0], skip_special_tokens=True)
    resposta_limpa = resposta.replace(input_validacao, "").strip().upper()
    
    # Verifica se a resposta cont√©m "ACEITAR"
    return "ACEITAR" in resposta_limpa[:20]

def processar_resposta_principal(pergunta):
    """Processa a pergunta com o LLM principal de triagem"""
    input_text = f"{system_prompt}\n\nUsu√°rio: {pergunta}\nAssistente:"
    inputs = tokenizer(input_text, return_tensors="pt").to(model.device)
    
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_new_tokens=200,
            temperature=0.3,
            do_sample=True,
            top_p=0.9,
            pad_token_id=tokenizer.eos_token_id,
            repetition_penalty=1.1
        )
    
    resposta_completa = tokenizer.decode(outputs[0], skip_special_tokens=True)
    resposta_limpa = resposta_completa.replace(input_text, "").strip()
    
    # Limpa a resposta
    if "Assistente:" in resposta_limpa:
        resposta_limpa = resposta_limpa.split("Assistente:")[-1].strip()
    
    # Remove linhas que possam conter partes do prompt
    linhas = resposta_limpa.split('\n')
    resposta_final = []
    
    for linha in linhas:
        linha = linha.strip()
        if linha and not any(palavra in linha.lower() for palavra in ['usu√°rio:', 'sistema:', 'prompt:', 'instru√ß√µes:']):
            resposta_final.append(linha)
    
    return '\n'.join(resposta_final).strip()

# Loop principal - SIMPLES e focado no LLM
print("=" * 60)
print("üè• SISTEMA DE TRIAGEM DE QUEDAS - PROTOCOLO MANCHESTER üè•")
print("\nSou um assistente de enfermagem especializado no processo de triagem de quedas baseado no protocolo de Manchester. \n \nRespondo apenas a quest√µes relacionadas com o procedimento de triagem de quedas. \n \nEsta an√°lise √© totalemte realizada por IA")
print("=" * 60)
print("Digite a sua quest√£o ou escreva 'sair' para encerrar.")
print("\n" + "-"*60)

while True:
    pergunta = input("\nüí¨ Quest√£o: ").strip()
    
    if pergunta.lower() in ['sair', 'exit', 'quit', 'q']:
        print("\nüëã Encerrando o sistema. At√© logo!")
        break

    if not pergunta:
        print("‚ö†Ô∏è  Por favor, digite a sua quest√£o.")
        continue

    print("ü§ñ A sua quest√£o encontra-se em processo de an√°lise, por favor aguarde.")
    
    # O LLM decide se aceita ou rejeita
    if valida_com_llm(pergunta):
        print("‚úÖ Quest√£o v√°lida, prosseguindo com a triagem...")
        
        try:
            resposta = processar_resposta_principal(pergunta)
            
            print("\n" + "="*50)
            print("ü©∫ RESPOSTA DA TRIAGEM:")
            print("="*50)
            print(resposta)
            print("="*50)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao processar: {e}")
        
    else:
        print("\n‚ùå A quest√£o colocada n√£o se encontra relacionada com a triagem de quedas.")
        print("Desculpe, s√≥ posso responder quest√µes relacionadas com triagem de quedas em humanos segundo o protocolo de Manchester. \nGrato pela compreens√£o!")